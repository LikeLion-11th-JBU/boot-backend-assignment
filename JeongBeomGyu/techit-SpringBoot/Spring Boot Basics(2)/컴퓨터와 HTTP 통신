OSI - 물리 계층, 데이터 링크 계층, 네트워크 계층, 전송 계층, 세션 계층, 표현 계층, 응용 계층
TCP/IP - 네트워크 접근 계층(데이터 링크 계층, 물리 계층), 인터넷 계층(네트워크 계층), 전송 계층, 응용계층(세션 계층, 표현 계층, 응용 계층)
응용 계층(7계층)에서 HTTP,SMTP,FTP는 주고 받을 데이터를 어떤 규칙을 가지고 작성하느냐에 대한 것들을 응용계층에서 정의하는 것이다. 
HTTP(통신 규약) - http://(데이터를 주고 받는데 필요한 규약), 응용 계층에 정의된 통신 규약, 서버와 클라이언트 간에 메시지를 전달하는 형식을 정의한 규약
REST 와  HTTP는 다르다. REST는 좋은 API를 만들기 위한 규칙들이 정의되어 있다. 
HTTP의 GET요청 메소드 - Request Line에는 메소드, Path, 버전이 들어가 있다. Request HEaders에는 HTTP 요청에 대한 부수적인 데이터가 들어가 있다.(요청이 어떠한 형식으로 되어있는지, 어디로 보내는 요청인지를 가르쳐주는 부분이다.). Request Body 에는 HTTP 요청에 관한 실제 데이터가 들어가 있다.

HTTP 응답 - Status Line : 요청 처리에 대한 상태 표시줄( 버전과 응답에 대한 처리에 대한 정보가 들어가 있다.) Response Headers : HTTP 응답에 대한 부수적인 데이터, Response Body : 응답 데이터.
URL - 인터넷 상에 자원의 위치를 나타내는 문자열
scheme(규약-Http)+ ':' + '//' + (통신 규약에 따라서 userinfo @가 들어간다.반드시 들어가는 것은 아니다.) + 'host(어떠한 곳으로 보내는지. 도메인)' + ':' + ('port'역시 선택사항이다.) + 'path'(뒤에가 요청을 받을 때 어떤것을 해석을 하느냐에 대한 부분이다.) + '?' + 'query(조회를 할 때 필요함)' + '#' + 'fragment(하나의 문서에 어떤 부분을 나타내는 것)'
path를 기준으로 path앞은 인터넷 상의 컴퓨터를 나타내는 부분이고, path뒤로는 컴퓨터 안의 위치(경로)를 나타내는 부분이다.
HTTP 요청을 어떻게 처리를 하느냐라는 것을 정의할 때 어떠한 컴퓨터로 요청을 보냈는지를 아는 것이 아는것이 아니라, 그 컴퓨터에 무엇을 요청했느냐를 알아야한다.
Media Type - 인터넷 상에서 주고받는 데이터의 형식 (대표적으로 이미지, video, js가 있다.)
content-Type : HTTP의 응답 데이터의 Media Type을 알려주는 헤더
backend 서버를 만들 때 대표적으로 알아야하는것 - Application/json, multipart/form-data(파일을 업로드할 때 많이 사용)는 데이터를 받는 입장에서 가장 많이 다루게 되는 컨텐츠 타입이다.
json은 데이터를 주고받을 때 가장 많이 사용하는 형태. 속성 - 값의 형태와 배열을 활용한다. 일반적인 데이터를 표현한 객체는 JSON 형태로 주고받는다.