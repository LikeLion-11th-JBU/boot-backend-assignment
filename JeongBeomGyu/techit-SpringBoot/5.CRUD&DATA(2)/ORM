관계형 데이터베이스의 한계
관계형 데이터베이스는 Primary Key가 존재하고, 다른 table에 PrimaryKey를 가리키기 위한 Foreign Key가 존재한다. -> 즉 서로 연관성이 있는 table의 데이터를 표현하기 위해서 PrimaryKey와 ForeignKey를 사용을 한다.
관계형 데이터베이스에서 사용하는 자료의 형태가 객체 지향 관점에서 맞짖 않아서 생기는 간극이다. (즉 data를 유연하게 다루기 위한 것이 아니라, 그냥 data를 저장을 하기 위한 용도이고, 그렇기 때문에 SQL이라는 특수한 언어를 사용을 해서 data를 조회하는 부분들이 만들어졌다.)
그래서 나온 것이 ORM이다.
ORM (Object Relational Mapping) - DB를 어떤식으로 다루느냐에 대한 부분이다. 관계형 데이터를 객체로 표현하는 프로그래밍 기법이다. 즉 기술의 방식 중에 하나이다. 프레임워크의 이름이 아니라, 어떤 프레임워크가 ORM을 구현하는 기술이다. 
JPA는 이미 존재하는 자바의 객체들에다가 데이터상의 테이블에는 어떤 식으로 표현이 될지를 정의하기 위해서 탄생한 일련의 어노테이션들이다. @Entity, @DynamicUpdate, @Id, @GeneratedValue 이 어노테이션 4개가 JPA라는 라이브러리(API)상에 정의가 되어 있는 어노테이션들이다. 즉, JPA 자체는 관계형 데이터를 객체로 표기하는 기능뿐이다. 
그러므로 JAVA 에서 ORM을 사용할 때는 HIBERNATE 프레임워크를 사용한다. HIBERNATE는 JPA의 API를 활용을 해서 DB를 다뤄주는 것이다. HIBERNATE가 JPA를 이용해서 ORM을 구현한 기술 중 하나이다. 즉 JPA에 대한 이해가 충분하면 직접 ORM 프레임워크를 만들 수 있다.