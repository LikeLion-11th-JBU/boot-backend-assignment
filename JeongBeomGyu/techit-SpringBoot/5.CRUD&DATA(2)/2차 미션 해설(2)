게시글에 사진을 첨부했을 때 어떤식으로 작동하면 좋을 지에 대해서 생각을 해보고, backend 서버로 구현을 해보자
게시글 자체의 데이터는 json으로 보내게 된다.
실제로는 이미지를 올리는 API를 따로 만들고, 그 API의 결과들을 이제 client에서 control 해서 하나의 데이터로 보내주면, 그것이 양쪽을 위해서 훨씬더 편하게 작업을 할 수 있다. 그래서 카카오톡 같은 것에서 사진을 추가할 때를 보면, 사진을 나열한 다음, 전송을 보낼 때 전송이 된다. 즉, 전송하는 기간이 따로 존재한다.

1. 파일 업로드를 하는 Meidacontroller를 만든다.
@RestController
@RequestMapping("media")
public class MediaController {
    private static final Logger logger = LoggerFactory.getLogger(MediaController.class);
}
1-2. 파일을 다루게 할 것이다. 우선 업로드를 테스트할 것이다.
@PostMapping("test")
    public void uploadMedia(
            @RequestParam("file")MultipartFile file
            ){
        
    }
추가로 업로드를 한 다음 저장을 할 것이다.
String basePath = "./media";  ->어떤 경로에 저장을 할 것인지 지정을 해준다.
        File directory = new File(basePath);  ->->디렉토리 이름을 basePath로 지정을 했기 때문에 이 디렉토리에 파일을 만들어 준다.
        if(!directory.exists()) directory.mkdir();  
        Path newFilePath = Path.of(basePath, file.getOriginalFilename()); -> 파일명을 정해준다. (Path.of를 사용하면 여러개의 경로들을 이어서 하나의 경로를 만들어줄 수 있다. 그러면 @RequestParam이 전송을 했던 사용자 입장에서의 file name이 file.getOriginalFilename()에 들어가고, 그걸을 어디에 저장할 지가 basePath에 지정이 된다. 그리고 그것을 path.of로 모아서 하나의 경로로 지정을 하면 Path의 위치에 있는 파일을 지정을 하는 객체가 된다. Path는 어디에 있는지 지정을 해주고 Path를 모아서 만들어주기 위한 객체이다. )
        try {
            file.transferTo(newFilePath);
        } catch (IOException e){
            e.printStackTrace();
        } -> 그리고 path를 저장(전달)을 해준다. 이떄 예외가 발생할 수 있으므로, try catch로 예외를 처리해준다. 보통 파일을 열고 닫는 과정에서 문제가 발생하거나, 데이터가 없을 때 문제가 발생한다.

        -> 이 방법은 file과 path 객체를 활용을 해서 directory를 만들고 어디에 다 저장할지 지정을 해서 MultipartFile에 있는 데이터를 옮긴것이다.

2. MediaController에서 사용할 서비스에 대한 정의를 할 것이다. (service패키지를 새로 만든다.)
2-1. mediaService라는 인터페이스를 만든다.
void saveFile(MultipartFile file); -> savefile로 MultipartFile을 받는다.
void saveFileBulk(MultipartFile[] files); -> 파일 하나가 아니라 여러 개를 동시에 올릴 때 사용하는 함수이다.
byte[] getFileAsBytes(String resourcePath); -> 정적리소스를 보내주기 위한 설정해주는게 없기때문에 임시로 해준다.

3. service를 정의한 후 서비스를 구현하는 구현체를 만든다.
LocalMediaService라는 이름의 클래스로 만든 다음 implements 로 mediaService를 가져온다. 또한 Service라는 어노테이션을 클래스 위에 붙여준다.
LocalMediaService인 이유는 나중에 데이터만 따로 모아놓는 서버를 구상을 한다던지, AWS3같은 외부 서비스를 사용해서 다시 요청을 보낸다음, 자원을 넘겨준다던지 같은 과정이 필요할 것인데, 그거에 필요할 법한 interface 메소드만 미리 구현을 해 놓으면, LocalMediaService가 나중에 변경이 되더라도 실제로 LocalMediaService를 사용하게 되는 MediaController 주체에서는 바뀌지 않아도 되기 때문이다. save를 한다음 돌려주는 기능까지 만든다고 하면, save를 한 시점에서(postDto를 만든 시점에서 id를 돌려주듯이) 어디로 요청을 해야 데이터를 받아올 수 있는지에 대한 정보가 필요할 것이다.

4. save한 시점에서 어디로 요청을 해야 데이터를 받아올 수 있는지에 대한 model을 만든다. (MediaDescriptorDto)
여기에는 status를 추가 (요청을 처리한 결과가 어떻게 되었는지에 대한 내용)
어떤 일이 있었는지에 대한 메세지
사용자가 보내준 파일의 이름을 첨부
리소스Path로 urlPath를 첨부
구성으로 model을 만든다.
public class MediaDescriptorDto {
    private Integer status;
    private String message;
    private String originalName;
    private String resourcePath;

그 다음 빈생성자, 생성자, getter, Setter, toString을 만든다.
그 다음 model을 MediaService인터페이스와 LocalMediaService가 클래스가 돌려주도록 구조를 바꾼다.
MediaService인터페이스
public interface MediaService {
    MediaDescriptorDto saveFile(MultipartFile file);
    Collection<MediaDescriptorDto> saveFileBulk(MultipartFile[] files);
    byte[] getFileAsBytes(String resourcePath);
}

LocalMediaService 클래스를
    @Override
    public MediaDescriptorDto saveFile(MultipartFile file) {
        return null;
    }

    @Override
    public Collection<MediaDescriptorDto> saveFileBulk(MultipartFile[] files) {
        return null;
    }

    @Override
    public byte[] getFileAsBytes(String resourcePath) {
        return new byte[0];
    }
로 바꾼다. 이렇게 되면 MediaService 구현체인 LocalMediaService를 만들 준비가 끝난다.

5. LocalMediaService에 새 함수를 선언한다. 
5-1. 파일을 MultipartFile에서 받아온다.
또한 예외 처리를 위해서 try catch를 사용한다. (시간을 받아오는 이유는 만에하나, 두명의 사용자가 같은 파일의 이름을 올릴 수 있기 때문에 날짜별로 파일을 나누고 파일앞에다가 시분초같은 타임스탬프를 붙여줌으로서 중복된 파일이 올라올 때, 이것을 무시하고 올리는 데로 다 올릴 수 있게 만든다. 또한 이미지 같은 것들이 올라오면, 똑같은 파일이니까 중복 저장하지 않는 여러가지 방법들이 있다. 지금은 날짜를 기준으로 폴더를 나누고, 시간을 기준으로 파일을 나누겠다.) targetDIr의 Path을 알기위해서 basePath를 LocalMediaService에 정의를 한다. -> 그러기 위해서 logger도 설정.   
private MediaDescriptorDto saveToDir(MultipartFile file){
        MediaDescriptorDto dto = new MediaDescriptorDto();
        dto.setStatus(200);             -> 그 다음 status 설정
        dto.setOriginalName(file.getOriginalFilename());  -> file의 이름도 찾아준다.
                try{
            LocalDateTime now = LocalDateTime.now();
            String targetDir = Path.of(
                    basePath,
                    now.format(DateTimeFormatter.BASIC_ISO_DATE)).toString(); ->format은 현재 LocalDateTime이 가지고 있는 시간정보를 어떻게 출력을 할지를 정의해주고 있다
            String newFileName = now.format(DateTimeFormatter.ofPattern("HHMMSS"))  
                    + "_"
                    + file.getOriginalFilename(); ->파일 name을 정의해준다. 이렇게 만들면 완벽하게 똑같은 시간의 파일이 아니라면 파일을 구분할 수 있다. (시분초_원래파일의 이름 형태로 파일의 이름이 만들어진다.)
            File dirNow = new File(targetDir);  ->nowDir를 만들어줘야한다. -> 이것은 하루에 한번만 작동을 해서 확인해주면된다.
            if(!dirNow.exists()) dirNow.mkdir();
            file.transferTo(Path.of(    ->이렇게 디렉토리가 존재하면 저장을 해준다.
                    targetDir,
                    newFileName
            ));
            descriptorDto.setResourcePath(Path.of(  ->descriptorDto의 resourcePath를 set으로 가져온다.
                    targetDir,
                    newFileName).toString().substring(1)  ->이렇게 하게 되면 basePath의 . 디렉토리부터 시작을 하게 된다. 왜냐하면 targetDIr가 basePath부터 시작했기 때문이다. basePath는 ./ 시작한다. 그 다음 substring(1)을 하면 ./media에서 부터 시작하는 문자열로 정의가 된다. 이렇게하면 자원의 경로가 나오게될 것이다.
            );
            return descriptorDto;
        }catch (IOException e){   ->이때 IOException을 transferTo가 발생시키므로 catch로 예외처리를 해준다.
            logger.error(e.getMessage());
            descriptorDto.setMessage("failed");
            descriptorDto.setStatus(500);
            return descriptorDto;

        }
      
    }

이렇게 되면  descriptorDto의 status 와 fileName과 resourcePath가 정의가 될 것이다.

5-2. 이렇게 하면 saveFile함수에 return에 saveToDir(file)을 반환하면 된다.
@Override
    public MediaDescriptorDto saveFile(MultipartFile file) {
        return this.saveToDir(file);
    }

5-3. saveFileBulk는 MultipartFile이 여러개 들어오고 있으므로 for each를 사용한다.
public Collection<MediaDescriptorDto> saveFileBulk(MultipartFile[] files) {
        Collection<MediaDescriptorDto> resultList = new ArrayList<>();
        for(MultipartFile file: files){
            resultList.add(this.saveFile(file));
        }
        return resultList;
    }

6. 이렇게 파일을 저장해 놓은 것(MediaService)을 MediaController에서 받아서 사용을 할 것이다.
6-1 MediaService를 받아온다.
    private final MediaService mediaService;

    public MediaController(@Autowired MediaService mediaService){
        this.mediaService = mediaService;
    }
6-2. 하나의 파일을 올리는 함수 생성
@PostMapping("upload")
    public ResponseEntity<MediaDescriptorDto> uploadMedia(
            @RequestParam("file")MultipartFile file){
        MediaDescriptorDto descriptorDto = this.mediaService.saveFile(file);        //mediaService의 saveFile 결과를 받아준다.
        return ResponseEntity
                .status(descriptorDto.getStatus())
                .body(descriptorDto);//ResponseEntity를 보낼 것인데 이때 ok가 아닌 status를 사용해서 IOException을 발생시키고 발생시킨것을 처리하는 것보다는 status로 처리한다. 그러기 위해서 MediaDsecriptDto에서 Integer 로 status를 넣어두었다. 이러면 status를 내부에서 사용할 수 있다.
    }       // -> 이렇게 하면 하나의 파일을 올리는 함수가 만들어진다.

6-3. 여러 파일을 올리는 함수 생성
    @PostMapping("upload-bulk")
    public ResponseEntity<Collection<MediaDescriptorDto>> uploadMediaBulk(
            @RequestParam("file") MultipartFile[] files  // 여러개의 파일을 동시에 올리는 것도 MultiPart Form 데이터로 진행하는 것이기는 하지만 이렇게 파라미터 이름을 동일하게 해서 여러개의 파일을 올려주게되면 SpringBoot에서 그것을 Array의 형식으로 가져올 수 있다.
    ){
        return ResponseEntity
                .status(HttpStatus.MULTI_STATUS)        // 한번에 여러개의 파일을 올리게 되니까 파일에 따라서 실제로 정상적으로 올라간것과 정상적으로 올라가지 않은 것이 두가지 경우가 있어서 Multi_STATUS로 놓고, 이렇게되면 클라이언트가 일일이 내용을 확을을 해서 정상적으로 파일들이 올라갔는지 확인을 해 달라는 의미가 된다.
                .body(this.mediaService.saveFileBulk(files));
    }

6-4. 파일을 가져오는 함수 생성
@GetMapping("**")
    public ResponseEntity<byte[]> staticLikeEndpoint(
            HttpServletRequest request
    ){
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.IMAGE_PNG);       //header 설정에다가 지금 보내고 있는 애들의 따라서 contentType을 설정을 해주려고 사용을 했던 부분이다.
        return new ResponseEntity<>(        //ResponseEntity를 새로 new를 통해서 만들고
                this.mediaService.getFileAsBytes(request.getRequestURI().split("media")[1]),    // 정적파일을 보내는 설정을 하지 않고 그냥 코드상에서 보내는 상황일 때
                headers,      -> 헤더 지정을 해준다. 헤더에 contentType에 대한 정보가 정상적으로 들어가 있으니까 body의 내용이 잘 출력이 된다.
                HttpStatus.OK
        );
    }
}


만약에 Front개발자가 여러개의 패러그래프로 구성된 내용으로 만들고 싶을 때는 PostDto에 private List<String> elementList = new ArrayList<>(); 같은 형태로 만들어 놓고 각각 p element, div element를 기준으로 들어가는 변수를 선언할 수 있고, 그 안에 MediaController 에 만들어 놓은 ipload를 했을 때 url값이 들어갈 수 있다.

7. LocalMediaService에 가서 파일을 가져오는 함수에 대한 설정을 마무리 해준다.
@Override
    public byte[] getFileAsBytes(String resourcePath) {
        try {
            return Files.readAllBytes(Path.of(basePath, resourcePath));      //endpoint에 media가 붙은 것인데, 상황에 따라서 media가 안붙고 다른 것이 들어갈 수도 있으니까 media와 상관없이 요청한 파일명만 전달하면 안쪽에서 어떠한 경로로 그 파일을 찾아야 될지를 검증을 하기 위해서 readAllByte를 사용하였다.
        } catch (IOException e) {  //이때 IOException이 발생하기 때문에 catch로 처리해준다.
            logger.error(e.getMessage());
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
        }
    }





