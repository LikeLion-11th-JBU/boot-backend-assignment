Spring Boot - (web)Application Framework

HTML, CSS, JS : 인터넷의 브라우저를 통해서 사용자들에게 제시된다. (인터넷 브라우저가 사용하는 기술들)

HTML - 브라우저에 표시될 내용을 기술하는 언어 ( 이 그림이 어떤 식으로 그려져야한다는 설명서 같은 역할)

CSS - 표현되는 형식을 정의하는 언어 (HTML 문서상에서 자기소개서 페이지를 만들 때, 자기소개 페이지의 이름에 해당하는 부분들에 대한 것들을 설정함)

JS - 브라우저에 동작을 제공하는 언어 (브라우저에서 사용하고 있는 HTML문서의 동작을 정의하는 언어. 단, 다른 페이지로 넘어가는 것은 js와 연관되어 있지 않을 수 도 있다.)

JBM과 공통점
JBM을 통해서 javaBytecode를 실행하게 되는데, javabytecode를 컴퓨터에서 실행하기 위해서 필요한 것이 JBM이라고 한다면, HTML,CSS,JS를 사용자들의 눈에 보이는 웹 페이지의 형태로 만들기 위해서 필요한 것이 인터넷 브라우저이다.

인터넷 브라우저는 표준이 없다.

Frontend와 Backend의 차이
인터넷 브라우저 => HTML, CSS, JS를 해석하는 도구
Frontend - 사람들이 보고 있는 부분에서 작동하는 것들이다. (viewjs 프레임워크, reactjs 프레임워크가 존재하지만, 브라우저를 통해서 활용을 해보면 대부분 끝에는 HTML, CSS, JS로 완성이 되어있다.)즉, Frontend 개발자는 브라우저에 보이는걸 중점으로 공부하는 개발자이다. 사이트에서 어디에서 어떤 요소들이 나올지같은 부분, 화면에 보이는걸 어떻게 보일지에 대해 개발하는 것이다. HTML문서를 만들 때 그 문서를 탬플릿화 했다라고 생각할 수 있다.

Backend - 여러 사용자들이 동일한 탬플릿을 사용하겠지만, 그 안에 있는 게시물들은 다를 것이다. 그 게시물 내용이 다른 내용물들을 관리를 하는 부분이 서버, 정확히는 컴퓨터에서 관리를 하게 된다. 요청을 받으면 그것에 대한 어떠한 내용으로 응답을 할지 채워넣을지에 대한 응답을 돌려주는 형태로 이루어져있다. 이렇게 컴퓨터에서 사용자의 요청에 따라 보여주는 내용, 데이터를 다르게 조작을 하는데 집중하는(비지니스 로직). 즉 상황에 맞는 로직과 데이터를 다루는 개발자를 Backend개발자라고 한다.

Frontend 개발자와 Backend 개발자들의 차이점 - 
Frontend 개발자들은 눈에 보여지는 것의 기능을 중점으로 다루고 Backend 개발자들은 비지니스 로직, 데이터를 다루는 개발자이다. 

Full 스택 개발자 - Frontend 개발 + Backend 개발을 동시에 하는 개발자

Client - Server Model : 인터넷이란 기본적으로 원격으로 연결된 수많은 컴퓨터들이 이루는 네트워크이다. 인터넷 브라우저에서 HTML문서를 주게 된다면, 어떠한 웹 페이지의 형태로 보여지게 된다. 이떄 HTML문서는 로컬 컴퓨터에 있을 수 도 있고, 다른 컴퓨터에서 받아올 수 도 있다. 즉, 인터넷을 통해서 또 다른 컴퓨터 또는 서버 컴퓨터에 요청을 보냄으로서 다시 돌려받는 HTML 문서를 브라우저에서 페이지의 형태로 보여주게 된다. 이때 사용되는 요청과 응답의 형태는 HTTP이다. HTTP는 어떠한 형태로 요청을하고 응답을 할지에 대해 정의가 되어있다. 즉, HTTP 요청과 응답을 통해서 HTML문서를 받고, 그것이 브라우저에 표시가 된다. 인터넷에서 하나의 페이지를 돌려받았을 때, 이 페이지에서 할 수 있는 일과 할 수 없는 일이 있는데, 새로운 데이터를 받거나 데이터를 보낼 때, 그 때 인터넷을 통해서 다시 한번 요청을 보내게 된다. 그러면 반대쪽에 있는 서버는 그 요청에 대한 사용자의 데이터를 다루거나, 데이터를 돌려주거나하는 기능들을 한다. 데이터를 돌려받은 인터넷 브라우저는 한동안 서버와 분리된 상태로 존재한다(서버가 바로 필요하지 않기 때문이다.). 하지만 어떤 특정한 동작을 할 때 서버에 있는 데이터가 필요하다던지, 서버의 데이터를 추가로 보내주는 동작을 통해서 요청을 보내고 응답을 받는다. 그리고 인터넷 브라우저는 인터넷이 끊겨도 그 상태로 유지가 된다. 이러한 형태로 인터넷 브라우저는 서버에 특정한 요청을 보낸다. 일정한 요청을 보내면 거기에 맞는 응답을 서버에게 받는다. 이렇게 만들었을 때 서버 프로세스와 클라이언트 프로세스(인터넷 브라우저)는 서로 분리가 되어 있다고 볼 수 있다. 이런 식으로 요청과 응답을 통해서 하나의 컴퓨터 또는 프로세스에서 또 다른 컴퓨터 또는 프로세스에 요청과 응답을 주고 받는 형태를 띄는 어플리케이션을 Client - Server Model이라고 부른다.

Spring Boot 프레임워크의 역할 - 요청을 보내면 그것에 따른 응답을 돌려준다. Spring Boot는 서버 프로세스에 해당하는 것이다. Spring Boot로 만드는 서버 프로세스(인터넷에서 요청을 받고 응답을 돌려주는 목적인 서버 컴퓨터는 다르다.)

Spring boot 는 HTTP 요청 등을 받으면 요청에 따른 응답을 돌려주는 Web Application을 만드는 Framework이다. 

Framework - 특정한 목적을 위한 도구 또는 라이브러리의 모음