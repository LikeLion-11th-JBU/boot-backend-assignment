SpringBoot 설정하는 방법
설정파일 작성
지금까지의 개발환경은 내 로컬 컴퓨터 내부이다. 내 컴퓨터 안의 JDK, MYSQL등에 맞춰서 어떤 데이터베이스를 사용을 할지를 설정했다. 실제로 서비스를 제공을 할 때에는 자신의 컴퓨터 내부에서만 일어나지는 않는다.
첫 번째로는 서버 컴퓨터에다가 JDK를 활용을 해서 Java를 실행하는 방법
두 번째로는 Docker를 활용을 해서 컨테이너로 어플리케이션을 만들어서 활용을 하는 방법
세 번째로는 AWS라는 클라우드 서비스를 통해서 컴퓨터를 받아와서, 거기에서 자원을 활용을 해서 서비스를 제공하는 방법(최근 가장 많이 쓰임)
실제 서비스를 실행하는 데에는 여러가지 환경들을 구성할 수 있다. 즉, 어디에서 어떤식으로 어플리케이션을 실행하느냐에 따라서 설정이 바뀌어야 된다. 어떤 설정을 만들어야되는지 같은 부분들을 잘 인지하고 있어야 서비스를 올리고 제공하는 단계에서 문제없이 진행을 할 수 있다.
yml 파일에서 환경에 따라서 변경이 필요한 부분은 대표적으로 URL, username, password가 있다. 또한 상용환경에서 ddl-atuo와 show-sql에 대해서도 변경이 필요하다. 또한 test를 위한 개발환경이거나 DB가 MYsql이 아닐 수 있다. 그때는 driver-class-name이나 hibernate의 dialect또한 바뀔 수 있다.
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver       
    url: jdbc:mysql://127.0.0.1:3306/demo_jpa_schema    -> 어떤 데이터베이스를 사용을 하는지, 어디에 있는 데이터베이스를 사용하는지에 대한 내용, 또한 DB에서 사용을 하게 될 schema이름 또한 어디에 있는 DB에 따라서 변경이 될 것이다. 
    username: demo_jpa    -> 제공받은 username과
    password: acoh3657!   -> 제공받은 password 또한 계속해서 변경이 필요할 것이다.
  jpa:
    hibernate:
      ddl-auto: create    -> 상용환경에서는 ddl-atuo를 none/ 만약 개발을 하고 있는 환경에서는 DB의 table을 바로바로 Entity형식에 맞게 적용을 시켜야할 필요성도 있기 때문에 ddl-auto를 create또는 createdrop 설정으로 유지할 수 도 있다. 
      show-sql: false     -> 상용환경에서는 false라고 둔다./ 만약 개발을 하고 있는 환경에서는 실제로 hibernate에서 실행되는 sql문이 어떻게 진행되는지에 따라 변경이 될 수 있다.  
      properties:
        hibernate:
          dialect: org.hibernate.dialect.MySQL8Dialect 

properties 파일에서 spring.config.activeate.on-profile을 사용해서 설정하는 방법
test환경에서 필요한 yml파일 설정
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/demo_jpa_schema
    username: demo_jpa
    password: acoh3657!
  jpa:
    hibernate:
      ddl-auto: create
      show-sql: false
      properties:
        hibernate:
          dialect: org.hibernate.dialect.MySQL8Dialect
이렇게 설정을 해놓고 springBoot를 실행하면 실행 두 번째 줄에 no active profile set이라는 문구가 나온다. 이때 일종의 profile을 설정을 해 놓으면, 그 profile에 속한 정보를 사용을 해서 어플리케이션을 실행을 한다. 이떄 default는 기본값으로 진행하고 있다는 의미이다.
default라는 기본값 대신에 다른 설정을 하기위해서 yml파일 수정
1. 하나의 yml파일안에 여러개의 문서를 넣어서 설정을 하는 방법인 멀티 다큐먼트 yml이라는 방법(기존것 위에 ---을 써서 구분해준다.), (하나의 어플리케이션파일 안에 여러개의 설정을 넣는다.)

1-1. 원래 했던 것과 동일한 것을 사용할 수 있도록 구조를 설정한다.
spring:
    profile:
    active: local

1-2. datasource ,jpa와 똑같은 레벨에서 config, activate, on-profile을 작성해준다.

spring:
  config:
    activate:
      on-profile: local
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/demo_jpa_schema
    username: demo_jpa
    password: acoh3657!
  jpa:
    hibernate:
      ddl-auto: create
      show-sql: false
      properties:
        hibernate:
          dialect: org.hibernate.dialect.MySQL8Dialect

-> 이렇게 해놓으면 어느정도 위의 profile의 active에서는 어떤 profile이 activate한지를 파악한 다음 어떤 profile을 사용을 해서 어플리케이션을 실행할지가 미리 정의가 되는 것이다. 그 다음 config, activate, on-profile이라는 부분은 현재 profile이 local일 때 실행을 하는 설정이다라는 의미이다.
이렇게 해놓고 실행을 한다음 똑같이 2번째 줄을 보면 profiles are active: local이라고 해서 profile이 local에서 실행되고 있다는 사실을 알 수 있다.  

1-3. 위의 설정을 똑같이 복사한다음 붙여넣어주면 또 다른 파일을 통해서 설정할 수 있다.
spring:
    profile:
    active: local
---
spring:
  config:
    activate:
      on-profile: local
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/demo_jpa_schema
    username: demo_jpa
    password: acoh3657!
  jpa:
    hibernate:
      ddl-auto: create
      show-sql: false
      properties:
        hibernate:
          dialect: org.hibernate.dialect.MySQL8Dialect
---
spring:
  config:
    activate:
      on-profile: test -> test용도로 profile 사용
  datasource:
    driver-class-name: org.h2.Driver  -> h2로 DB변경 (h2는 메모리 내부에서 작동을 하는 DB이다. 설치같은 것들이 필요가 없다.)
    url: jdbc:h2:mem:testdb
    username: sa
    password: password
  jpa:
    hibernate:
      ddl-auto: create
      show-sql: false
      properties:
        hibernate:
          dialect: org.hibernate.dialect.H2DDialect
이때 첫 번째로 on-profile을 test로 변경하면 test용도로 profile을 사용할 수 있다.(test를 할 때 원래 사용하는 DB를 사용하면 데이터가 꼬이기 때문에 별도의 DB를 구축해야한다.) 그렇기 때문에 MYSQL이라는 DB대신에 다른 DB를 사용한다. ->  두 번째로 driver-class-name을 org.h2.Driver으로 변경한다. DB를 변경했으니 3 번째로 URL을 jdbc:h2:mem:testdb로 변경한다. 4번 째로 username을 sa, 5번 째로 password를 password로 변경한다. 마지막으로 dialect를 org.hibernate.dialect.H2DDialect로 변경한다. 
이렇게 하면 2번째 test용도의 설정이 완료된다. 하지만 이 상태로 진행을 하면 2번째 설정이 실행되지 않는다. profiles are active : local을 볼 수 있다. 즉, 앞서 작성한 내용을 기준으로 작동하고 있다. 그렇다면 2번째 설정을 작동하게 하기 위해서는 spring profile active의 local을 test로 변경해주면 test로 진행이된다. (이때 실행이 되지 않으면 h2가 gradle안에 설치가 되어 있지 않기 때문이다. 이때는 build.gradle안에 h2에 필요한 내용을 작성해준다 -> runtimeOnly 'com.h2database:h2' -> 실행중에만 사용을 하는 dependency이다.)

-> 이것은 컴퓨터나 서비스를 어디에 올릴 것인지에 따라서 조금씩 변경이 될 것이다. 
1-4. docker container을 기준으로 설정을 해볼 것이다. (docker container에서 실행이 될 경우 자신의 컴퓨터가 아니라 container 내부의 ip를 찾게된다. 그렇기 때문에 url의 ip 주소가 변경된다.). DB는 SpringBootApplication와 다르다. 즉 URL은 그 DB에 어떻게 접근을 하는지에 대한 정보를 주는 부분이다.
spring:
  config:
    activate:
      on-profile: local
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://172.17.0.1:3306/demo_jpa_schema -> docker container 내부의 ip로 변경(container 내부에서 사용하고 있는 컴퓨터의 ip로 전달된다.) (프로덕션 서버라고 하다면 ip에 aws-host.ap-north-2.com.rds라는 식으로 ip가 변경될 수 있다.)
    username: demo_jpa
    password: acoh3657!
  jpa:
    hibernate:
      ddl-auto: create
      show-sql: false
      properties:
        hibernate:
          dialect: org.hibernate.dialect.MySQL8Dialect

-> 지금은 DB하나만을 바꾸고 있지만 나중에 API를 사용을 할때에는 API로 접근하는 API ID키 같은 것을 상황에 따라서 개발용 개정, 상용용 개정으로 나눠줄 수도 있고, 외부 소프트웨어를 사용할 때도 접근을 하는 방식을 명확하게 명시를 해줘야하기 떄문에 설정들을 바꿔줘야한다. 
-> 지금까지 하나의 파일에서 여러가지 설정들을 넣는 방법
(SpringBoot와 Spring과의 차이점은 SpringBoot는 일반적으로 Spring에서 사용하는 설정들을 미리 모아서 정의해 놓고 사용을 한다. 그렇기 때문에 dev에 대한 설정이 없어도 spring, profile, active에 dev를 넣고 실행을 해도 실행이 되는 것을 볼 수 있다.)

2. 이렇게 설정들이 한 파일안에 많이 들어가면 가독성이 떨어지기 때문에 설정들을 다른 파일에 분리해서 넣어줄 수도 있다. 

2-1. application-local.yml을 application.yml 파일을 복사한 다음 이름만 local을 추가해서 만들어 준다.(그 다음 application.yml에 local에 대한 설정을 삭제한다.) 이렇게 어플리케이션 설정파일을 나누어주기만 하면 된다. (밑의 local설정을 제외한 부분은 삭제) -> 즉, local설정을 하고 외부에다가 이 설정을 따로 빼주고 싶으면 application-local.yml으로 이 yml파일이 local 설정파일이라는 것을 명시한 다음 이 설정파일에 local 과 관련된 설정을 넣어주기만 하면 된다. 이렇게 했을 때 on-profile부분은 제거해줘도 상관이 없다.
실행 순서는 application.yml 파일의 아래쪽에 있는 부분을 다 읽고 아래 있는 내용중에서 profiles, active에 관련된 내용(지금은 local로 설정)이 없다면, resource에 존재하는 application-local이라는 파일을 찾고, 거기에 해당하는 설정들을 가져다가 사용을 한다. 
test에 대한 설정도 동일하게 분리할 수 있다.  

=> 즉 기본적으로 build 단계에서 설정할 파일을 정의할 때 spring, profile, active에 들어갈 이름이 profile의 이름이다. 이 profile의 이름에 따라서 설정 파일을 application-profile명 형식으로 작성을 하면 된다. 

3. 실제로 이 profile을 실행하는 단계
현재는 spring, profiles, active의 설정을 바꿔주면서 진행을 하지만, 실제로는 jar파일을 만들었을 때 어떻게 설정을 하느냐 -> jar파일에도 이 설정값이 기본으로 들어가게 될 것이다. -> 상용환경에서 실행을 할때만 작동하게 바꿔줄 수도 있다. 
=> jar 파일 만들기 

3-1. Gradle 창을 연 다음 jpa의 tasks 밑에 build에서 bootJar라는 파일이 있다.  -> bootjar를 만들라는 task이다. 이 파일을 실행하면 jar파일이 build의 libs안에 jar파일이 생성된다. 

3-2. 이 jar파일을 실행할 때에는 terminal에서 java + '-jar" + "실행을 하고싶은 파일의 경로" => java -jar /build/libs/jpa-0.0.1-SNAPSHOT.jar을 쳐서 실행을 한다. (가장 기초적인 SpringBoot를 배포할 때는 jar파일을 만들어서 실행하여 서비스를 올리고자 하는 컴퓨터에 가져가고 거기에서 java를 실행을 하는 형식으로 작동을 한다.)

3-3. 이때 다른 profile을 실행하고 싶을 때에는 terminal에 java -DSpring.profiles.active=local -jar build/libs/jpa-0.0.1-SNAPSHOT.jar (현재는 yml파일을 사용하기 때문에 이런식으로 작성, 만약에 properties파일을 사용했다면 spring.profiles.active=test 와 같은 형식으로 작성되었을 것이다.)를 쳐서 실행을 하면 현재 만약 test가 profile이라면 local로 profile이 바뀐다. (일반적으로 동일한 설정이 존재한다면 마지막으로 전달이 된 설정이 들어가게 된다. 즉, application local과 test가 멀티 다큐멘트 형식으로 들어가 있을 때 둘다 실행이 된다면 둘 중 마지막으로 들어오게 된 설정을 사용하게 된다.) 

4. ProfileComponent라는 class를 생성한다. -> profile에 따라서 생성이 되는 Bean객체 또한 다르다라는 것을 보여준다.

4-1. class 위에 Component와 Profile이라는 어노테이션을 붙인다. profile은 local로 지정한다. (Component로 어노테이션된 class는 기본적으로 SpringBootApplication이 실행이 될 때 conStruct가 되어서 IoC Container로 넘어가게 된다.)
@Component
@Profile("local")

4-2. 로거와 빈 생성자를 생성한다.
@Component
@Profile("local")
public class ProfileComponent {
    private static final Logger logger = LoggerFactory.getLogger(ProfileComponent.class);
    public ProfileComponent(){
        logger.info("profile component profile: local");  -> profile 어노테이션으로 local이라는 것을 전달했다는 점을 확인하기 위해 설정
    }
}

4-3. 이렇게 해놓고 다시 build를 한다. 그 다음 terminal에 java -jar /build/libs/jpa-0.0.1-SNAPSHOT.jar로 실행하면 위에서 만들었던 class가 실행되는 것을 볼 수 있다. 즉 Profile이라는 어노테이션을 사용하게 된다면 어떤 Bean을 먼저 사용을 할지에 대한것을 정의할 수 있다. (나중에 인터페이스는 다르지만 그 결과가 동일하게 사용될 것들을 작성할 때 이런 식으로 사용하면 된다.) 

4-4. 예를 들어 MessageQueueInterface라는 interface를 작성해본다
이때 String readMessage();라는 함수를 받는다고 한다.

4-5. 그러면 이러한 인터페이스가 정의가 되었을 때 이 인터페이스를 구현하는 Bean을 만든다. 하나는 RabbitMQ라는 class를 만든다. 또 다른 하나는 KafkaMQ라는 class를 만든다. 둘다 MessageQueueInterface라는 것을 구현을 하기 때문에 implements MessageQueueInterface를 해준다.
이때 RabbitMQ와 KafkaMQ는 비슷한 역할로서 사용을 하게 되는 서로 다른 소프트웨어이다. 기능은 비슷한데 문제는 RabbitMQ 사용할 때 인터페이스와 KafkaMQ를 사용할 때 인터페이스는 똑같지만 인터페이스에서 구현되는 내용이 다르다. 만약 KafkaMQ가 상용단계에서 사용되고, RabbitMQ은 개발단계에서 사용된다고 하면 둘다 @Component로 들어가게 될 것이지만, KafkaMQ는 Profile에 상용 profile에서만 작동이 되도록 prod가 들어가고, RabbitMQ은 Profile에 개발단계에서만 사용되게 !prod가 들어간다.
그렇기 때문에 RabbitMQ에 들어가는 code는 "code for communicating with RabbitMQ" 즉 RabbitMQ에 구현된 코드
@Component
@Profile("!prod")
public class RabbitMQ implements MessageQueueInterface{
    @Override
    public String readMessage() {
      
        return "message from rabbitmq";
    }
}

@Component
@Profile("prod")
KafkaMQ에 들어가는 code는 "code for communicating with KafkaMQ" 즉 KafkaMQ에 구현된 코드 가 RabbitMQ가 다를 것이다.
public class KafkaMQ implements MessageQueueInterface{
    @Override
    public String readMessage() {
        return "message form kafka";
    }
}

-> 즉 서로다른 소프트웨어를 동일한 기능을 위해서 사용을 하게된다면 Profile 어노테이션을 통해서 어떤 Profile일 때만 그 Bean이 생성이 될지를 정의할 수 있다. 

4-6. 만약 prod profile로 실행을 한다면  KafkaMQ 소프트웨어가 실행 될 것이고, prod가 아니라면 RabbitMQ가 실행될 것이다. -> 상황에 맞는 설정을 사용한다. 

=> 지금까지 SpringBoot에 전달을 해준 Bean들은 전부다 어떠한 Class의 형태로 제작이 되어왔다. 예를 들면 RestContoller 형태의 Bean, Service 라는 형태의 Bean, Repository 라는 형태의 Bean등이 있다는 것을 확인할 수 있다. 이렇게 클래스에 붙는 어노테이션에 대해서만 했지만 만약에 외부에서 사용하는 라이브러리 중에 인기있는 것은 구글의 라이브러리 gson이 있다.
gson을 추가하기 위해 build.gradle안에 implementation 'com.google.code.gson:gson:2.8.5'을 추가하고 Gradle에서 bootJar를 실행한다. (gson은 실제 존재하는 라이브러리이다.)

4-5. gson이라는 라이브러리를 SpringBoot가 다룰 수 있도록 하고싶은데, 그 클래스를 가져와서 @RestContoller와 같이 Bean을 붙여줄 수는 없기 때문에 GsonComponent라는 클래스를 만든 다음 Component라는 어노테이션으로 Bean을 붙여준다.
@Component
public class GsonComponent {
    public final Gson gson;
    public GsonComponent(){
        this.gson = new Gson();
    }

    public Gson getGson(){
        return this.gson;
    }
}

4-6. PostController에 primary final Gson gson과 생성자에 @AutoWired GsonComponent gson 과 this.gson = gson.GetGson();을 추가해준다.
이런 식으로 작성을 하면 외부의 라이브러리를 IoC Container의 관리하에 두기위한 과정이다. 

4-7. 이것은 너무 복잡하기 때문에 SpringBoot에서 SpringBoot에서 제공하는 어노테이션이 있다. 첫 번째는 Configuration이라는 어노테이션이고 두 번째는 Bean이라는 어노테이션이다. 

4-8 DemoConfig라는 클래스를 생성한다. 그 다음 클래스 위에 Configuration이라는 어노테이션을 붙여준다. Configuration이라는 어노테이션은 자신이 Bean을 제공하고 여러가지 설정들을 담기위해서 만들어진 어노테이션이다. 이 어노테이션이 붙은 클래스는 SpringBoot에서 사용할 설정들, 또는 Bean들을 만들 수 있는 클래스라는 것을 IoC Container에 전달을 한다. 즉, Configuration이라는 어노테이션은 SpringBoot에서 제공하지 않는 또는 자신이 만들지 않은 라이브러리 클래스들을 Bean으로 제공을 하면서 설정에 필요한 클래스들을 객체화해서 IoC Container에 전달을 하기위해 존재한다.

4-9. Gson이라는 메소드 위에 @Bean이라는 어노테이션을 붙여준다. @Bean을 붙여주게 되면 이 함수의 결과로 나타나게 되는 Gson이라는 반환값이 Spring IoC Container의 관리하에 들어가게 된다. 즉 Gson이라는 class를 Ioc에 넘겨주는 것이다. 그러면 controller에서 AutoWired를 통해 Service를 받아왔듯이 DemoConfig에 있는 Gson이라는 함수의 결과가 IoC Container에 있고 그것을 AutoWired를 통해서 controller에 가져올 수 있다.
@Configuration
public class DemoConfig {
    @Bean
    public Gson gson(){
        return new Gson();
    }
}

5. 지금까지 한 설정은 SpringBoot가 필요로 하는 설정들이다. 이번에 할 것은 우리가 따로 어플리케이션을 진행하기 위해서 필요한 설정들을 넣는 방법이다.
custom property에 대해서 알아본다.

5-1. yml파일에 아래와 같이 추가해준다.
spring:
  profiles:
    active: test
    
custom:
  property:
    single: custom-property
    comlist: comma,sparated,list,to,value

-> 이러한 설정은 Springboot와 상관없는 외부 API를 사용할 때 사용한다.
예를 들어
custom:
  property:
    single: custom-property
    comlist: comma,sparated,list,to,value
    ncp:
      id: api-key
      key: api-key
      url: http://ncp.com/
같이 설정할 수 있다.

5-2. 이런것을 어떤식으로 사용할 수 있을지 DemoConfig 클래스를 통해서 알아본다.
또 다시 어노테이션을 붙여주면 된다. 이번에 사용할 어노테이션은 @Value라는 어노테이션이다. 
   @Value("${custom.property.single}")
    private String customProperty;
    
    @Value("${custom.property.comlist}")
    private List<String> customCommaList;
를 하면 Value안에 custom.property.single과 custom.property.comlist에는 yml에서 설정되어 있는 single과 comlist값을 찾아서 들어가게 된다.즉 yml파일의 single에 설정되어 있는 custom-property라는 값이 customProperty라는 변수에 들어가게 될 것이다. 

5-3. 이렇게 Value에 들어가는 값들은 기본적으로 Bean이 생성되고 나서 들어가는 것이기 때문에 conStruct에서 Logger를 찍는 것으로 확인을 하기 힘들기 때문에 javax에서 제공하는 PostConstruct라는 어노테이션을 사용해서 확인할 수 있다.
    @PostConstruct
    public void init(){
        logger.info("custom property: {}", customProperty);
        
        for(String commaListItem: customCommaList){
            logger.info("comma list item: {}", commaListItem);
        }
    }

5-4. 추가로 @Value("${custom.property.default:default-property}")를 할 때 default에 대해서는 yml에서 설정을 안해놨기 때문에 :을 붙여줬다.
@Value("${custom.property.default:default-property}")
private String propertyDefault;
를 한 다음 위의 init 함수안에 logger.info("default property: {}", propertyDefault);를 작성한다.
그러면 propertyDefault라는 변수에 default-property가 들어간 것을 확인할 수 있다.

5-5. 내가 추가한 설정을 application.yml 파일에 작성을 하면 어떤 profile로 실행을 해도 내가 추가한 설정은 읽히게 될 것이다. 반면에 test나 local.yml 파일에 작성을 한다면 해당 profile이 실행될 때 내가 추가한 설정이 읽히게 될 것이다.

=> SpringBoot는 모든 객체가 Bean으로 이루어져있고, 자신이 선언해 놓은 것이 어떻게 어디로 들어가는지에 대한 구분을 정확하게 해야지만, 그 기능을 활용할 수 있다.