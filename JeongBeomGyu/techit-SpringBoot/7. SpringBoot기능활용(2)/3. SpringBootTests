postman에서 Http 요청을 보내면 SpringBoot는 Http 응답을 돌려준다. SpringBoot는 HTTP 서버를 웹어플리케이션을 만들기 위해서 사용하는 프레임워크이다. 
SpringBoot 에서 Controller와 Service, Repository라는 각각의 클래스들에서 Controller는 Service에 요청을 보내고, Service는 Repository에 요청을 보내는 식으로 서로 상호작용을 하고 있었다. controller에서 Service에 요청을 보내는 함수를 정의하기 위한 Dto, Service가 Repository에 요청을 보내는 함수를 정의하기 위한 Entity 등을 전부 java 소스코드로 작성을 했다. 이것들이 우리가 정상적으로 소스코드를 작성했는지, 의도한 대로 입력을 했으면 의도한 결과가 돌아오는지에 대한 test가 필요하다. -> 개별 코드 단위의 테스트가 필요할 수도 있다. unit test는 controller 하나, Dto 하나 같이 각각의 함수들이 정상적으로 작동을 하는지,즉 작은 단위에서의 코드들이 정상적으로 작동을 하는지를 검사한다. 그리고 integrate test는 통합 test이다.
test를 한 것은 PostController 기준으로 test를 할 것이다.

1. test를 하기 위해 build.gradle에 dependenies에 testImplementation 'org.springframework.boot:spring-boot-starter-test'이 있는지 확인하고, testImplementation('org.junit.vintage:junit-vintage-engine'){
		exclude group: 'orh.hamcrest', module: 'hamcrest-core' 
	}

을 추가한다. exclude는 testImplementation org.springframework 와 org.junit이 겹치는 라이브러리이 있을 경우 사용하지 않겠다고 gradle에 알리는 것이다. 

1-1. config 라는 패키지에 JpaAuditConfig라는 클래스를 만들어준다. 그 다음 클래스에 Configuration과 EnableJpaAuditing 어노테이션을 붙여준다. EnableJpaAuditing은 test를 하면서 jpa기능들을 사용할 것인데, test를 할 때 SpringBoot application 전체를 다 구성을 하기에는 힘들기 때문에 내부의 JpaAuditConfig에 EnableJpaAuditing를 붙여주는 것이다. -> 즉 test에서는 application 전체를 돌리는 것이 아니라, 클래스만 선택적으로 굴리기 때문에 SpringBoot application에 JpaAuditConfig가 붙어있으면 정상적으로 test가 이루어지지 않는다.
@Configuration
@EnableJpaAuditing
public class JpaAuditConfig {
}

1-2. PostController의 ReadPost와 readPostAll 함수를 test해 볼것이다. test 파일에 해당 함수들을 포함한 PostController를 만든다.
package dev.aquashdw.jpa;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class PostControllerTest {

    @Test
    public void readPost() {
    }

    @Test
    public void readPostAll() {
    }
}

이것은 기본적인 junit이기 때문에 SpringBoot를 test하기 위해서는 추가적인 설정이 더 필요하다.

1-3. 클래스 위에 @RunWith(SpringRunner.class) 어노테이션을 붙여준다. RunWith 어노테이션은 test를 돌릴 때 어떤 어플리케이션을 test하는지를 기준으로 ()안에 들어가는 class가 달라진다. 그 다음 클래스 위에 @WebMvcTest(PostController.class)를 붙여줌으로서 test를 하기 위한 class를 붙여준다. @WebMvcTest 어노테이션은 Mvc 부분을 test할 것이다라는 뜻이고, 즉 Controller의 함수들을 test하기 위해서 존재하는 어노테이션이다. 이것은 unit 같이 작은 단위의 test를 할 때 사용하는 어노테이션이다. 이렇게 WebMvcTest라는 어노테이션을 붙이면 개발을 하면서 만들어 놓았던 클래스들 중에서 Spring의 Bean으로 등록된것중 Controller 부분이 실제로 Spring application을 실행을 했을 때 작동을 하는 것과 비슷하게 작동을 한다. 대신에 Component, Service 같은 부분은 작동하지 않는다. 

1-4. 만들었던 PostController를 보면 Autowired로 postService를 받고있다. -> 하지만 WebMvcTest라는 어노테이션이 붙으면 Service는 Bean 객체로 만들어지지 않기 때문에 @AutoWired로 postService를 받아와도 Service Bean이 생기지 않는다. 이럴 때 Service인 척하는 Mock을 가져온다.
MockMvc는 Http 클라이언트인 척을 하는 객체이다. 그래서 mockMvc.preform() 이라는 함수가 있는데 ()에다가 어떠한 요청을 보낼지, URL같은 것을 설정해주면 mockMvc.preform이 마치 Controller의 http 요청을 보낸것과 같은 작동을 하게 된다.(실제로는 아니지만)

1-5. @MockBean이라는 어노테이션 밑에
     @MockBean
    private PostService postService;
을 써주면 MockBean이라는 것은 실제로는 만들어지지 않은 Bean을 만들어진 것 처럼 만드는 어노테이션이다. 즉, MockBean으로 어떠한 Configuration 내의 함수 또는 멤버변수에다가 넣어준다면, 이것들은 Bean 객체로서 IoC Container에 등록이 된다. 그러면 실제로 만들어야될 PostController 클래스에서 PostService에 대한 Bean을 가져다가 사용할 수 있다. 이때 실제 PostService와는 다르지만 PostController가 이것을 사용을 하는데는 문제가 없다. 

1-6. test를 할 코드들을 작성해 줄 것인데 given, when, then이라는 3개의 단어를 잘 봐야한다. 대부분의 test코드를 작성을 할 때 given, when, then 이 3단계로 나누어서 test코드를 작성한다. 이렇게 작성을 하면 이 test코드가 어떠한 목적을 가지고 작성을 했는지 파악하기가 편하다. 
given -> 어떤 데이터가 준비가 되어있다. 는 것을 보여주기 위한 조건이다. -> 조건에 대한 코드를 작성해주면 된다.
(예를 들어 read는 데이터를 읽어와야하는데 읽어오기 위해서는 데이터가 이미 존재해야한다.)
when -> 어떤 행위가 일어났을 때 (함수 호출 등) 무슨 일이 일어났는지에 대한 부분을 정의하는 부분이다. 
then -> 어떤 결과가 올 것인지
=> given으로 어떤 것을 줬고 when을 통해 무엇을 요청했다는 것을 알면 마지막으로 어떤 결과가 올것인지 에 대한 then
=> (예를 들면 given은 PostEntity가 존재할 때, 또는 PostService가 PostEntity를 잘 돌려줄 때 / when은 경로에 Get 요청이 오면 / then은 PostDto가 반환된다. )

1-7. 위 3가지 단계를 기준으로 readPost 함수를 만들어준다.
우선 given 단계 
우선 PostDto를 만들어 준다.
PostDto testDto = new PostDto();

 그리고 만든 PostDto 는 미리 DB에 넣어줄 것이다. -> 실제로 DB에 넣어주지는 않고 Service가 PostDto를 돌려주는 용도이다 
 id를 명백한 값으로 줌으로서, 나중에 이 id를 URL 경로에다 넣어줄 것이다. 
    final int id = 10;
    testDto.setId(id);
    testDto.setTitle("Unit Title");
    testDto.setContent("Unit Content");
    testDto.setWriter("unit");

1-8. 
     @MockBean
    private PostService postService;
는 실제로 Service 기능이 없기 때문에 여기에 기능을 부여해 줘야한다. 기능을 부여할 때 Mockito라는 given함수를 사용한다. 그리고 given()안에 어떠한 기능을 하기 원하는 함수를 써주면 된다. given(postService.readPost(id)) 를 readPost 함수 안에다가 써주면 된다. -> PostService의 readPost라는 함수를 호출할 때 id를 주면 된다. 이 id를 주면 그것에 맞는 testDto를 반환을 해야한다. 그반환값을 willReturn(testDto)라고 써준다.
given(postService.readPost(id)).willReturn(testDto); 를 readPost 함수 안에 써주면 된다. 즉 given은 readPost가 호출되었을 때 testDto가 반환될 것이라는 것을 흉내내는것이다. 


1-9. 어떠한 행위가 일어났을 때에 대한 when을 작성한다. -> 경로에 요청이 들어올 때
        final ResultActions actions = mockMvc.perform(get("/post/{id}", id))  -> 이때 예외가 발생할 수 있으므로 readPost함수에 throwException을 붙여준다.
                .andDo(print());

-> ResultActions라는 것은 mockMvc라는 것이 perform이라는 결과를 돌려줬다. 이 결과가 우리가 기대하는 것과 맞는지 확인을 하기위한 인터페이스가 andExpectAll이다 


1-10. 어떠한 결과가 올것인지에 대한 then을 작성한다. -> andExpectAll 사용 -> actions에 저장되어 있는 함수들을 호출함으로서 결과가 기대했던것과 동일한지를 확인하는 과정을 작성해주게 된다. 
        actions.andExpectAll(
                status().isOk(),     // Http 요청을 보냈으니까 Http 응답이 올것인데, 그 status 코드가 ok 200인지를 확인하기 위한 조건이다.
                content().contentType(MediaType.APPLICATION_JSON),// content에 대한 것을 요청하는 부분이다. -> content 타입이 무엇인지 확인해달라는 요청
                jsonPath("$.title", is("Unit Title")),  // jsonPath를 사용해서 돌아온 값이 json인지 확인하는 용도, jsonPath는 json을 위한 정규 표현식이다. json 내용물이 어떤식으로 구성이 되어있는지 확인을 하기위한 정규표현식이다. 여기서 $표시는 json문서 자기 자신을 의미하는 것이고, .은 현재위치, title은 key값을 의미한다. 즉, 이 문장은 돌아온 json의 첫 key element인 Title은 Unit Title일 것이다를 의미하고 있다.
                jsonPath("$.content", is("UnitContent")),
                jsonPath("$.writer", is("unit"))
        );

-> 여기까지하면 이제 기대하는 것은 다 적은 것이다. 
-> 지금까지 readPost에 대한 test이다.


2. readPostAll 함수에 대한 test
원래 readPostAll 같은 경우에는 그냥 get을 하면 readPostAll하고 들어오는 방식이다.
readPostAll을 test할 것이라면 readPost와 똑같이 Dto를 만들고, 그걸 PostService에 들어갔을 때 List의 형태로 돌아오게 만드는 형태로 해야한다.

2-1. 어떤 데이터가 어떻게 주어질 것이라는 given을 작성 -> readPostAll 함수에 PostDto를 만들어준다.
    @Test
    public void readPostAll() {
        PostDto post1 = new PostDto();
        post1.setTitle("title 1");
        post1.setContent("test");
        post1.setWriter("test");
        PostDto post2 = new PostDto();
        post1.setTitle("title 2");
        post1.setContent("test2");
        post1.setWriter("test2");

        List<PostDto> readAllPost = Arrays.asList(post1, post2);
        given(postService.readPostAll()).willReturn(readAllPost);

-> post가 여러개 있을 때 그게 몇개일 것이다 같은 부분을 확인할 수 있다.

2-2. 어떤 행위가 일어났을 때에 대한 when을 작성한다.
Mvc를 호출한다. 
final ResultActions actions = mockMvc.perform(get("/post"))
                .andDo(print());            // andDo는 결과를 받으면 ()안의 것을 하라는 뜻이다. 이때 perform 역시 readPostAll 옆에 throws Exception을 써준다.

2-3. 어떤 결과가 올 것인지에 대한 then을 작성한다.
                actions.andExpectAll(
                status().isOk(),
                content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON),
                jsonPath("$", hasSize(readAllPost.size()))  // 전달 받은 json 객체 전체($)가 같은크기를 가지고 있다
                );

-> unit에 대한 test이다.


3. PostController에 대한 integrate test를 해볼 것이다. 

3-1. 그러기 위해서 test에 PostControllerIntegrationTest라는 클래스를 생성한다.
이때 PostControllerIntegrationTest 클래스에 RunWithrhk SpringBootTest라는 어노테이션을 class에 붙여야하는데, SpringBootTest라는 어노테이션은 WebMvcTest 어노테이션과 달리 전체 SpringBoot application을 test한다는 뜻을 가지고 있다.( WebMvcTest는 일부분만 즉, Controller 클래스들만 Bean으로 만들어서 IoC Container에 넣는다.)즉, SpringBootTest는 Controller 뿐만 아니라 Service, Repository 등 모든 것을 다 Bean으로 만들어서 IoC Container에 넣는다.
@SpringBootTest()에 몇가지 설정을 추가할 수 있다.
@SpringBootTest(
        webEnvironment = SpringBootTest.WebEnvironment.MOCK,     // integration 을 진행할 때 실제환경이 어디일 것이라고 가정을 하느냐에 대한 내용이다.
        classes = JpaApplication.class              // classes 는 사용하는 application 일 것이다.
)

또한 추가로 @AutoConfigureMockMvc, @EnableAutoConfiguration, @AutoConfigureTestDatabase 이라는 어노테이션도 클래스 위에 붙여준다. @AutoConfigureTestDatabase 어노테이션은 사용하는 DB를 H2를 사용을 하고자 한다는 뜻이다. 

@RunWith(SpringRunner.class)
@SpringBootTest(
        webEnvironment = SpringBootTest.WebEnvironment.MOCK,     
        classes = JpaApplication.class              
)
@AutoConfigureMockMvc
@EnableAutoConfiguration(exclude = SecurityAutoConfiguration.class)
@AutoConfigureTestDatabase
public class PostControllerIntegrationTest {
}

이렇게하면 기본적인 integrate test에 대한 어노테이션 정리는 끝이 났다.

3-2. PostControllerIntegrationTest 클래스에 몇개의 함수를 넣어준다.
    // integrate test 를 하면서 임의의 entity를 많이 만들어둘 필요가 있기 때문에 밖에 함수를 빼서 만든다.
    // long을 반환값으로 해 놓은 이유는 read나 update, delete 같은 요청을 할 때 id가 없으면 어떤 것을 조작을 할지를 전달할 수 없기 때문에 Long을 반환값으로 놓았다.
    private Long createTestPost(String title, String content, String writer){
        PostEntity postEntity = new PostEntity();
        postEntity.setTitle(title);
        postEntity.setContent(content);
        postEntity.setWriter(writer);
        return postRepository.save(postEntity).getId();
    }

3-3 해당 함수에 대해서 setEntity함수에 적용한다.
    @Before                 // test를 진행하기 전에 실행이 되는 함수이다. 즉 test가 실행되기 전에 몇개의 Entity를 넣어주기 위한 선언이다.
    public void setEntities(){
        createTestPost("first post", "first post content", "test_writer");
        createTestPost("second post", "second post content", "test_writer");
    }
    -> 이렇게 하면 setEntities가 test하기 전에 실행이 된다.

3-4. read test를 해볼 것이다. -> 여기에서는 하나의 함수를 test하는 것이 아니라 전체 기능을 test하는 것이기 때문에 함수명도 조금 다르게 불러줘야한다. 
    @Test
    void givenValidId_whenReadPost_then200() throws Exception{        // read를 위해서 Id를 줄 예정이다_ReadPost 함수를 위한 언드포인트를 의미한다._기대하는것 200
        
    }

3-5. read test를 할 함수안에 들어갈 내용을 작성해야한다.
우선은 given을 작성한다.
Long id = createTestPost("Read Post", "Created on readPost()", "read_test");

3-6. when을 작성한다.
final ResultActions actions = mockMvc.perform(get("/post/{id}", id))
                .andDo(print());

3-7. then을 작성한다.
actions.andExpectAll(
                status().isOk(),
                content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)
                jsonPath("$.title", is("Read Post"))
                jsonPath("$.content", is("Created on readPost()"))
        );

그러면 전체적으로
@RunWith(SpringRunner.class)
@SpringBootTest(
        webEnvironment = SpringBootTest.WebEnvironment.MOCK,     // integration 을 진행할 때 실제환경이 어디일 것이라고 가정을 하느냐에 대한 내용이다.
        classes = JpaApplication.class              // classes 는 사용하는 application 일 것이다.
)
@AutoConfigureMockMvc
@EnableAutoConfiguration(exclude = SecurityAutoConfiguration.class)
@AutoConfigureTestDatabase
public class PostControllerIntegrationTest {
    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private PostRepository postRepository;          // integrate test 를 할 것이기 때문에 모든 Bean 들이 들어와 있는 상태이다.

    @Before                 // test를 진행하기 전에 실행이 되는 함수이다. 즉 test가 실행되기 전에 몇개의 Entity를 넣어주기 위한 선언이다.
    public void setEntities(){
        createTestPost("first post", "first post content", "test_writer");
        createTestPost("second post", "second post content", "test_writer");
    }

    @Test
    void givenValidId_whenReadPost_then200() throws Exception{        // read를 위해서 Id를 줄 예정이다_ReadPost 함수를 위한 언드포인트를 의미한다._기대하는것 200
        // given
        Long id = createTestPost("Read Post", "Created on readPost()", "read_test");

        // when
        final ResultActions actions = mockMvc.perform(get("/post/{id}", id))
                .andDo(print());

        //then
        actions.andExpectAll(
                status().isOk(),
                content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)
                jsonPath("$.title", is("Read Post"))
                jsonPath("$.content", is("Created on readPost()"))
        );
    }
    // integrate test 를 하면서 임의의 entity를 많이 만들어둘 필요가 있기 때문에 밖에 함수를 빼서 만든다.
    // long을 반환값으로 해 놓은 이유는 read나 update, delete 같은 요청을 할 때 id가 없으면 어떤 것을 조작을 할지를 전달할 수 없기 때문에 Long을 반환값으로 놓았다.
    private Long createTestPost(String title, String content, String writer){
        PostEntity postEntity = new PostEntity();
        postEntity.setTitle(title);
        postEntity.setContent(content);
        postEntity.setWriter(writer);
        return postRepository.save(postEntity).getId();
    }
}
이런 형태가 나오고 위의 unit test와 비교해도 큰 차이가 없는것을 확인할 수 있다. 



TDD(Test Driven Development) -> 테스트 주도 개발 : 실제 작동하는 코드 이전에 통과해야할 테스트를 우선 만드는 개발 방식
만약 BoardController를 만들고 싶을 때, 즉 Board와 관련된 행위를 하는 CRUD 객체를 만든다고 가정을 할 때 -> test패키지 내에서 BoardControllerTest라는 클래스를 작성하는 것이다. 
테스트를 먼저 만들면 존재하지 않는 코드에 대한 test를 만들었기 때문에 test는 무조건 실패할 것이다. 컴파일도 안된다. 없는 코드를 가져다가 쓸 수 없기 때문이다. 즉, 실패할 테스트를 작성하고, 테스트를 통과하게끔 코드를 다시 작성한다. 그 다음에는 작성된 코드를 수정한다. 즉, test를 먼저 만든다는 것은 일종의 목적지를 미리 만든다라고 볼 수 있다. 
순서는 첫 번째 테스트를 작성한다. 두 번째 테스트 시행 및 실패를 한다. 세 번째 테스트를 통과하는 코드를 작성한다. 네 번째 테스트 통과를 확인한다. 다섯 번째 테스트가 통과 되었으면 코드를 정리한다. 
TDD를 진행을 하게 되면은 기본적으로 unit test부터 시작을 해서 개발을 진행할 것이다. 그러므로 보다 객체지향적인 개발이 가능해 진다. 

4. TDD를 BoardControllerTest라는 클래스를 통해서 만들어 볼것이다. 그리고 @RunWith(SpringRunner.class), @WebMvcTest(BoardControllerTest.class) -> BoardControllerTest만 test하기 위해서 어노테이션을 class위에 붙인다.

@RunWith(SpringRunner.class)
@WebMvcTest(BoardControllerTest.class)
public class BoardControllerTest {
    @Autowired
    private MockMvc mockMvc;
}

4-1. test를 할 함수들을 들을 추가한다. 
함수 내용은 given when then 단계로 작성한다.
우선 given을 작성한다. 전달을 해줄 BoardDto가 없으면 BoardDto 클래스를 만들어준다.(test 패키지에 만들어지는 것이 아니다.)
BoardDto boardDto = new BoardDto();
        // Board의 요구 조건에 대해서 생각을 해보자
        boardDto.setName("notice");     //BoardDto는 이름을 정의할 수 있다.   -> BoardDto 에 setName이 없으므로 생성 -> 이때 파라미터에 notice를 name으로 바꿔준다.

4-2 . when을 작성해 준다.
        final ResultActions actions = mockMvc.perform(post("/board")
                        .contentType(MediaType.APPLICATION_JSON)    -> ResponseBody에 대한 내용
                        .content(toJson(boardDto)))                    -> 이렇게 하면 boardDto가 String이 되어야하기 때문에 string으로 바꿔주는 함수를 만들어야된다.
                .andDo(print());
-> boardDto를 String으로 바꿔주는 함수
->private byte[] toJson(Object object) throws IOException{
        ObjectMapper mapper = new ObjectMapper();            // Spring Boot에서 사용하는 jackson이라는 라이브러리에서 json을 만들 수 있는 기능들을 주고 있다.
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        return mapper.writeValueAsBytes(object);
} 
        

4-3. then을 작성해 준다.
        actions.andExpectAll(
                status().is2xxSuccessful()
        );

-> 를 한다음 실행을 하면 당연히 error가 나온다. -> mockMvc.perform(post("/borad"))에서 /board가 BoardController에 설정되어 있지 않기 때문이다.

4-4. 즉 BoardController에 Board 엔드포인트를 만들어줘야한다.
@RestController
@RequestMapping("board")
public class BoardController {
}

를 하면 다시 error가 나온다. 왜냐하면 앤드포인트의 class에 대한 RequestMapping만을 정의해 놓았기 때문이다.
4-5. 즉 BoardController 클래스 안에 PostMapping을 정의해준다.

    @PostMapping
    public void createBoard(@RequestBody BoardDto dto){

    }

    -> 을 한다음 다시 실행하면 error가 나온다. serializer를 찾지도 못했고, boardDto안에 내용물이 있는것도 아니기 때문이다.

4-6. BoardDto에 내용을 추가해준다.
public class BoardDto {
    private String name;

    public BoardDto() {
    }

    public BoardDto(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
을 한다음 다시 실행하면 is2xxSuccessful에 대해서 200 successful이 나온다.

4-7. 다음 기대사항으로 돌아온 것이 새로운 Id를 포함하고 있다라는 것을 기대한다.
BoardController의 then 단계의 is2xxSuccessful() 옆에 응답이 돌아왔다는 content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON)을 붙여준다. 
-> 이 다음 실행을 하면 문제가 발생한다. contentType not set -> BoardController의 createBoard의 반환값이 void이기 때문에 contentType의 값이 정의되어 있지 않다는 error가 나온다. -> void를 BoardDto로 바꿔준다. 그러면 반환값이 생겼으므로 return new BoardDto();을 반환해준다. 

4-8.BoardController의 then 단계의 is2xxSuccessful() 옆에 jsonPath("$.name", is("notice"))를 붙여준다. 
이 다음 실행을 하면 에러가 나오는데 이떄는 BoardController의 return 값의 BoardDto()안에 dto.getName을 넣어준 다음 필요한 dependency를 @MockBean을 통해서 BoardControllerTest에 BoardService를 추가한다. (먼가 새로운 dependency를 추가를 하고 싶을 때 BoardService라는 MockBean을 만든다. ) 
