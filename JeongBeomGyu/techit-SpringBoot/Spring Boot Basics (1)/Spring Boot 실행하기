일반적인 웹 서비스의 배포 구조 - 사용자 브라우저의 주소창에다가 주소를 넣으면은 그 조소에 해당하는 컴퓨터로 요청이 가고, 그 컴퓨터에서 웹 페이지를 돌려주게 된다.

신호가 컴퓨터에 들어온 이후 - 도메인을 통해서 요청이 들어오게 되고, 이러한 요청은 컴퓨터 안의 몇몇 프로세스로 가게된다.(apache, nginx라는 web server로 그 신호들이 들어가게 된다.)

IP는 컴퓨터를 가리키고 있다. 
Port는 그 컴퓨터 내부에 있는 프로세스에 배부를 해주기 위해 존재하는 2차적인 숫자이다.

포트 번호를 보고 웹 서버(조작 가능함)로 요청이 들어왔을 때 어떤 폴더(Filesystem)로 그 폴더에 있는 파일을 돌려주거나, 다른 Web Application Server로 다시 전달을 해준다.

웹 서버 - HTTP 요청을 받아서 그 요청을 전달하거나, 파일을 다시 전송하는 목적을 가지고 동작

웹 어플리케이션 서버 - 서버 소프트웨어 종류에 따라서 서비스를 제대로 제공하기 위한 기능을 갖춘 서버이다.

웹 어플리케이션 서버 (톰캣 - java로 만들어진 어플리케이션을 열기위한 서버), 그냥 Spring 프레임워크를 사용해서 결과를 본다고 하면 WAR파일로 만들어진다. 즉, 이 WAR파일을 받아서 웹 어플리케이션 서버가 기능을 제공한다. 또는 Spring boot를 그대로 사용할 수도 있다. 

웹 서비스를 하기위해서는 물리적인 서버(Hardware)가 필요하다. 그리고 그 앞에 web server를 붙인다. 그 다음 Filesystem을 돌려주는 정적 서비스 또는 Springboot같은 어플리케이션 서버로 넘겨주는 서비스를 제공한다. 
또는 물리적인 서버 바로 앞에 Springboot를 바로 붙여줄 수 도 있다. (서버의 구성은 다양한 방법이 가능하다.)

Spring  boot 프로젝트를 빌드하면 jar파일이 나온다.
JAR(Java ARchive) : Java로 작성 후 컴파일된 JavaBytecode와 실행을 위해 필요한 다양한 자원을 배포를 위하여 모아놓은 파일의 형태  => 다른 형태의 압축파일이다. ( java를 jdk 로 실행하게 된다면 JAr파일 안에 있는 javaBytecode들이 실행이 된다.)
ManiFEST => 정보들을 담아놓는 파일이다. (실행할 때 어떤걸 실행하고, 무엇이 메인이고, 무엇이 시작할 때 클래스인지 같은 것들이 정의되는 구간이다. ) main class는 프로그램의 시작점이다.(Main 함수)
projcet 구조와 Jar파일의 구조는 매우 유사하다. JAR는 필드된 결과물로서 Java를 통해서 JRA가 있는 환경에서 실행을 할 수 있도록 해준다.
java -jar 명령어로 Jar 파일을 실행할 수 있다.
Spring boot 프로젝트를 배포를 한다고 할 때, 이 Jar 파일을 서버로 가져가서 실행을 한다. 또는 이것을 docker 이미지로 만들어서 실행을 한다.

presentation layer - 사용자와 직접적으로 맞닿는 부분
logic layer - 요청을 처리하는 결정을 내리는 부분
Data Layer - 데이터를 저장하고 불러오는 부분. ( 사용자의 데이터 자체를 주고 받는 것이 아니라 데이터의 표현만 주고 받는다. 실제로 소스코드 상에서 데이터를 다루는 것이 아니라 사용자도 데이터의 표현을 전달해주고, 그것에 따른 데이터를 조작을 한 뒤 결과에 대한 데이터의 표현을 돌려준다. )

Spring boot의 구조
Dispatcher Servlet - 프레임워크 내부에 구현 ( 요청들을 받아내주는 역할)
Controller - Dispatcher Servlet에서 요청을 직접적으로 받고, 클래스의 형태로 정의된다.
Service - Controller가 검증해낸 요청을 받아서 사용자의 입력에 따른 데이터의 조작을 결정해주는 부분, 클래스의 형태로 정의된다. 
Repository - Data Layer로서 데이터를 저장을 하고, 데이터를 불러와서 데이터를 돌려주는 역할을 하는 부분이다.

즉 요청을 받으면 Dispatcher에서 요청을 받아서 어떤 Controllerd에게 요청을 전달할지 결정한 후 Controller를 요청을 검증을 한 후 Service로 요청을 보내준다. Service는 상황에 따라서 데이터 조작을 위해 Repository에 요청을 하고, Repository는 외부에 있는 DB와 소통을 하여서 데이터 표현의 일부를 받아온다.
