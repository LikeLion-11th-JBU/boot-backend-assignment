java로 이뤄진 프로젝트는 .java 파일에 정의된 java Source 코드로 구성된다. 
자바 소스코드 구성 - 안쪽에는 각각 파일명과 동일한 public class가 선언되어 있고, 그 내부에는 함수나 멤버 인자들을 정의한다.

javac (java compiler)
compiler : 소스코드를 기계어로 바꾸는 과정
compiler 다음 단계 -> build
build : 기계어로 바꾸는 것 뿐만이 아니라 실제로 어떤 기계어가 실행이 돼서 프로그램이 실행되는지에 대해 완성을 하기 위한 모든 과정을 build라고 한다. 

build 과정 
1. 자바 소스 코드를 다 javabytecode로 변환을 한다. main 밑의 test라는 디렉토리 안에도 자바 소스코드가 존재하므로 javabytecode로 변환한다.
2. test 디렉토리로 만든 javabytecode는 바로 그 단계에서 실행을 하고, 아무 문제가 없으면 프로젝트를 구성했던 모든 파일들을 합쳐서 하나의 파일로 제작을 한다.(패키징)
=> 이 모든 과정을 javac하나만을 가지고 하기에는 과정이 너무 복잡하다. 
=> 그래서 등장하게 된 것이 maven과 gradle이다. (build하는 과정을 자동화시켜주는 도구들이다.)

maven - java를 위한 Build Automation Tool. c#, Ruby 등의 다른 언어를 위해서도 사용 가능하다.
Project Object Model(POM) : xml의 형태로 프로젝트를 정의, pom.xml을 분석해 프로젝트 빌드. Maven은 Build를 자동화를 하기 위해서 무슨 작업을 해야하는지 알아야한다. 또한  그 정보를 저장하는 형태로서 xml 파일을 사용한다. 즉 Maven을 만들게되면 pom.xml이라는 파일부터 시작해서 그 파일이 존재하는 디렉토리가 Project의 루트(Project를 관리하는 디렉토리)인 것을 확인할 수 있다. 
Gradle와의 차이점은 Gradle 파일들이 없어지고, 대신 Mvn이라는 이름의 파일, pom.xml이 존재한다. 소스코드의 기본값은 다 똑같을 것이다. 
pom.xml을 보면 xml 파일은 HTML과 유사하게 태그를 통해서 어떠한 값을 주고 있는 것을 볼 수 있다. 즉, 구조화된 데이터를 표현하기 위한 문서 형식 중 하나이다. (가장 대중적인건 json) 
제일 위쪽에는 어떤 형식의 xml 문서인지가 나온다. Project xml은 이 xml에서 사용하고 있는 키 값들을 어디에서 가져오는지에 대해서 정의되어 있다. 또한 xsi는 어디에 있는 name space에서 사용을 한다는 정보들이 있다(어떤 키값을 사용할지에 대한 정의가 들어있다.). 
model version은 Project Object Model에서 Model을 의미한다. 즉, POM의 구조가 이렇게 될 것이라고 생각을 하고 Maven이 작동을 할 때, 그 모델의 버전을 의미한다. Spring Boot를 한다면 첫 번째 요소가 Parent가 될 것이다. 즉 지금 작성하고 있는 프로젝트가 어떠한 프로젝트의 하위 설정을 그대로 가지고 오고, 추가로 설정을 하겠다는 부분을 정의한다. Spring Boot에서는 기본적으로 Spring Boot starter-parent가 기본적으로 parent 부분에 존재한다. 
group id는 이 프로젝트를 만들고 있는 조직의 도메인을 역순으로 풀이한 것이다.(구글에서 만든 java 패키지 같은 경우 com.google이라는 group id를 가지고 있을 것이다.). 
artifactid는 그룹에 있는 하위 프로젝트의 상세한 artifact( 상세한 프로젝트가 무엇인지 ) 
version은 우리가 만들 프로젝트의 버전을 의미(위의 parent의 버전은 상속받는 프로젝트의 버전을 의미) version에서 major은 대규모 변경사항이 있을 때 올라간다(처음으로 사용자들에게 공개되는 경우). 마이너 체인지같은 경우는 메이저 버전이 유지가 되고 마이너 버전이 올라간다면 상위하위 호환이 가능하다(메이저가 바뀌면 이전에 사용하던 코드들을 다 바꿔줘야한다. 마이너 버전은 새로운 기능이 추가될 때 변경되는 부분). 패치 버전은 기능적인 부분이 없고, 일반적으로 버그를 수정을 했다거나, 사소한 변경사항이 있을 때 올라간다. SnapShot은 현재 고정된 버전이 아니라 개발단계에 있어서 빠르게 변경사항이 일어날 수 있다. 
dependencies에는 우리가 사용할 외부 프레임워크나 라이브러리에 대한 내용들이 들어가는 곳이다. dependency에는 version이 없는데, 그 이유는 parent에 버전이 있기 때문에 하위 버전에도 버전들이 자동으로 추가가 된다. dependencies가 끝나면 어떤식으로 build를 할 것인지에 대해서 정의한 부분이 나온다. plugin을 통해서 어떤식으로 build가 되는지 정의가 된다.

install이 끝나고 build success가 되면, target 디렉토리가 생성된다. target디렉토리는 Maven에서 결과를 저장하는 디렉토리이다. target 디렉토리 안에 maven-demo-0.0.1-SANPSHOT.jar가 Spring Boot의 결과물이다. 이 파일의 dependency(의존성)에 있는 라이브러리는 home 디렉토리의 밑의 m2 디렉토리안 repository에 존재하고 있다. 또한 이러한 라이브러리는 maven repository에 있는 라이브러리를 가져오는 것이다. 

Gradle - java를 위한 Build Automation Tool, c,c#, JS등을 위해서도 사용할 수 있다.

build.gradle은 groovy라는 언어로 프로젝트를 정의. Sub-project 등을 포함시키는 용도의 settings.gradle도 있다. Kotlin을 사용하여 정의할 수도 있다.(build.gradle.kts)
build.gradle을 보면 맨 위에 plugins가 있다. 기 이유는 gradle의 자체 구조가 어떤 식으로 build를 할지같은 것(task)들을 정의를 하기 때문이다. plugins는 실제로 할 수 있는 task들에 대한 plugin도 되고, parent와 dependency도 될 수 있다.(즉, 어떤 식으로 빌드를 할 것인지, 어떤 식으로 dependency 버전을 관리할 것인지에 대한 내용을 담고 있다.)
name은 settings에 있다(maven과 차이점).
gradle의 장점은 일정지정까지 성공을 한다면, 그 지점까지는 다시할 필요가 없다. Gradle도 Maven repository에 가서 어떤 라이브러리들을 가져오는지 확인할 수 있다. 
또한 dependency에는 어느 시점에서만 이 라이브러리가 필요한지가 이름으로 들어가 있다.((ex)implementation, testimplementation)
Gradle을 사용한다면 build, bootjar task를 진행하면 된다. 이를 진행하면 build 폴더가 만들어 진다. 결과물은 libs 디렉토리에 존재한다.



