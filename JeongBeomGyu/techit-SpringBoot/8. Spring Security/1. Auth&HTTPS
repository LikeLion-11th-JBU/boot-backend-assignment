Auth는 로그인 과정
login은 한 개인이 자기 자신을 증명함으로서 특정 컴퓨터 시스템에 접근하는 행위이다. 
Auth는 두가지를 내포하고 있다. 첫 번째는 사용자가 자신이 누구인지를 증명하는 과정(로그인을 하는 과정)-> Authentication으로 로그인이나 소셜 로그인, API 사용(API 사용을 할 때 API Id 키를 발급을 받고 그것을 서비스 제공자가 원하는 형태로 가공을해서 전달을 함으로서 사용을 한다.)을 할 때 비밀번호를 제공을 하게 되는데, 비밀번호가 HTTP요청을 보내게 된다면은, 일반적으로 모든 패킷들을 살펴볼 수 있다. -> 보안 취약 (즉 Authentication은 로그인 과정에서 비밀번호가 외부에 노출되지 않으면서 서로 상대방이 사용자가 누구인지 알아가는 과정에 대해서 연구를 하는 것이다.)
두 번째는 사용자의 기능 사용 권한을 검증하는 과정(인터넷 방송같은 곳에서 팔로워만 채팅을 할 수 있는 것 같은 과정)이다. -> Authorization으로 권한 관리, 작성,차단 등이 있다. (Authorization은 블로그, sns, cloud등 여러 상황에서 어떤 서비스를 사용할 수 있는지에 대한 과정이다.)

REST에서는 사용자가 자신을 누구인지 명백하게 매번 요청받아 증명받아야된다.(Authentication과 유사하다.)

브라우저 쪽에서 서버에 로그인을 요청(요청을 할 때 Id와 비밀번호같은 내용들이 포함된다)한다 -> 만약 그것이 옳은 정보라면 서버에서 DB조회를 통해서 실제로 사용이 가능한 사람인지를에 대한 정보를 sessionid: Userinfo(세션 id를 키로, user의 정보를 value로) 와 유사한 값의 쿠키로 브라우저한테 반환한다. (hashmap에서 key와 value의 형태로 세션 id와 userinofo를 저장하고 사용자 브라우저에는 sessionid를 반환한다음 쿠키에 저장하도록 요구한다.) -> 이 다음 단계 부터 모든 요청에 sessionid를 보함시켜서 요청을 보낸다. 그러면 서버에서 sessionid의 값을 확인을 하고 그 sessionid에 소속되어있는 User정보를 파악을 하여 로그인 여부를 판단한다. (쿠키가 사라지면 로그인을 했어도 로그인을 하지않은 것처럼 파악한다.)
쿠키는 도메인을 기준으로 저장이 된다. 즉, 도메인에서 다른 도메인에 대한 쿠키를 확인할 수 없다. (네이버에서 저장되어 있는 쿠키는 오직 네이버에서만 확인할 수 있다.)

HTTPS 의 기반 기술은 TLS이다.
TLS는 컴퓨터 네트워크 상에 정보를 안전하게 공유하기 위한 암호화 규칙이다. HTTPS는 HTTP에 TLS가 적용된 형태이다.

대칭키 암호화 -> 같은 키를 사용하여 암호화하는 방식으로 빠르고 자원의 소모가 적다. 하지만 양측이 동일한 키를 가지고 있어야한다. (동일한 키로 암호화하고 복호화한다.)

비대칭키 암호화(공개키 암호화) -> 서로 다른 키를 사용하여 암호화하는 방식으로 개인 키를 공개하지 않아 보안이 뛰어나고, 하드웨어 자원 소모가 크다, 또한 암호화 복호화 시간이 오래걸린다. (공개키와 개인키 두가지 키를 가지고 있다. 공개키로 암호화를 하고 개인키로 복호화를 한다. 개인키는 서버 내부에만 존재를 하고 공개를 하지 않는 키이다.)

TLS는 대칭키 암호화와 비대칭키 암호화를 둘다 사용한다. 
브라우저가 서버에 첫 번째 요청과 사용가능한 암호화 방식을 보낸다 -> 그러면 서버에서는 선택한 암호화 방식 및 인증서를 준다(공개키도 포함이 된다.). -> 브라우저는 서버의 공개키를 이용해서 대칭키를 만든 다음 서버의 공개키로 암호화를 한다. -> 서버에 암호화된 대칭키를 보내서 서버쪽에서 개인키를 통해서 대칭키를 확인한다. -> 서버는 받은 대칭키를 사용해서 응답을 암호화한 다음 브라우저에 보낸다. -> 브라우저는 대칭키를 통해서 복호화한 다음 내용을 확인한다. 