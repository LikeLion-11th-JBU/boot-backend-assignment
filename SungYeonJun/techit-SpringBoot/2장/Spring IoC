Java의 Interface

자동차가 있다.

자동차는 운전자 필요, 가속/감속가능

인터페이스를 잘 활용하면 굉장히 좋다

추상클래스 마찬가지

인터페이스나 추상클래스등 비쥬얼스튜디오처럼 정의로 이동 같이 무슨 클래스인지 확인가능

리스트를 잘 활용해야 한다.

함수의 인자와 반환 값은 인터페이스를 활용하자.

InputStream의 구현체는 많지만 다 InputStream의 기능을 가지고 있다. = InputStream을 필요로 하는 기능에는 구분없이 사용할 수 있다.

Spring IoC Container와 DI

스프링의 가장 큰 기능중 하나가 IoC

Inversion of Control = 제어 역전

스프링 이전 개발은 라이브러리를 이용.

개발자가 항상 통신을 받는 부분을 개발하지않고 어떠한 액션이 필요한지를 개발한다.

개발자의 코드를 프레임코드가 사용하도록 제어가 역전이 되었다.

IoC Container = 개발자가 작성한 코드, 설정 정보

그것을 합쳐서 만든것이 완전한 웹 서비스

코드 + 설정을 합친것을 Beans

Beans는 IoC가 컨트롤 하는 객체라고 생각하면 됨.

DI 는 디펜던시 인덱스

Spring에서 구현을 요구하는 부분들을 interface로 정의, 이후 사용자가 정의한 구현체 Bean을 실제 서비스에서 사용.

Spring과 Spring Boot의 차이

코드와 설정을 합쳐서 Beans. (스프링) XML의 형태로 설정을 만들었다. (스프링 부트) Spring Boot Starter에 정의가 되어있다.

스프링 = 실행을 위해 Tomcat과 같은 프로그램이 필요하다.(WAR파일).

스프링 부트 = Tomcat 같은 서버 프로그램이 내장되어, Jar의 형태로 실행이 가능하다.